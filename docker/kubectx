#!/bin/bash
#
# kubectx(1) is a utility to manage and switch between kubectl contexts.

# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[[ -n $DEBUG ]] && set -x

set -eou pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(dirname "$( readlink -f "${0}" 2>/dev/null || \
  python -c "import os,sys; print(os.path.realpath(sys.argv[1]))" "${0}" )")"

if [[ -f "${SCRIPT_DIR}/utils.bash" ]]; then
  source "${SCRIPT_DIR}/utils.bash"
else
  source "${SCRIPT_DIR}/../include/utils.bash"
fi

KUBECTX="${HOME}/.kube/kubectx"

usage() {
  cat <<"EOF"
USAGE:
  kubectx                   : list the contexts
  kubectx <NAME>            : switch to context <NAME>
  kubectx -                 : switch to the previous context
  kubectx <NEW_NAME>=<NAME> : rename context <NAME> to <NEW_NAME>
  kubectx -h,--help         : show this message
EOF
  exit 1
}

list_contexts() {
  set -u pipefail
  local cur="$(current_context)"
  local yellow=$(tput setaf 3)
  local darkbg=$(tput setab 0)
  local normal=$(tput sgr0)

  for c in $(get_contexts); do
  if [[ "${c}" = "${cur}" ]]; then
    echo "${darkbg}${yellow}${c}${normal}"
  else
    echo "${c}"
  fi
  done
}

read_context() {
  if [[ -f "${KUBECTX}" ]]; then
    cat "${KUBECTX}"
  fi
}

save_context() {
  local saved="$(read_context)"

  if [[ "${saved}" != "${1}" ]]; then
    printf %s "${1}" > "${KUBECTX}"
  fi
}

switch_context() {
  kubectl config use-context "${1}"
}

set_context() {
  local prev="$(current_context)"

  switch_context "${1}"

  if [[ "${prev}" != "${1}" ]]; then
    save_context "${prev}"
  fi
}

swap_context() {
  local ctx="$(read_context)"
  if [[ -z "${ctx}" ]]; then
    echo "error: No previous context found." >&2
    exit 1
  fi
  set_context "${ctx}"
}

user_of_context() {
  kubectl config view \
    -o=jsonpath="{.contexts[?(@.name==\"${1}\")].context.user}"
}

cluster_of_context() {
  kubectl config view \
    -o=jsonpath="{.contexts[?(@.name==\"${1}\")].context.cluster}"
}

rename_context() {
  local old_name="${1}"
  local new_name="${2}"

  local old_user="$(user_of_context "${old_name}")"
  local old_cluster="$(cluster_of_context "${old_name}")"

  if [[ -z "$old_user" || -z "$old_cluster" ]]; then
    echo "error: Cannot retrieve context ${old_name}."  >&2
    exit 1
  fi

  kubectl config rename-context "${old_name}" "${new_name}"
}

main() {
  if [[ "$#" -eq 0 ]]; then
    list_contexts
  elif [[ "$#" -gt 1 ]]; then
    echo "error: too many flags" >&2
    usage
  elif [[ "$#" -eq 1 ]]; then
    if [[ "${1}" == "-" ]]; then
      swap_context
    elif [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
      usage
    elif [[ "${1}" =~ ^-(.*) ]]; then
      echo "error: unrecognized flag \"${1}\"" >&2
      usage
    elif [[ "${1}" =~ (.+)=(.+) ]]; then
      rename_context "${BASH_REMATCH[2]}" "${BASH_REMATCH[1]}"
    else
      set_context "${1}"
    fi
  else
    usage
  fi
}

main "$@"
