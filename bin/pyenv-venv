#!/usr/bin/env bash
# pyenv-venv

set -euo pipefail
IFS=$'\n\t'

# Define colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if pyenv is installed
if ! command -v pyenv &> /dev/null; then
  echo -e "${RED}pyenv not found.${NC} Please install pyenv first: https://github.com/pyenv/pyenv#installation"
  exit 1
fi

display_usage() {
  echo -e "
${YELLOW}pyenv-venv:${NC} creates a symlink to .venv in project folder to named pyenv virtual environment

${YELLOW}Usage:${NC} pyenv-venv <pyenv-virtualenv name> <optional-python-version>

${YELLOW}Operations:${NC}
  -h, --help  Show this dialogue

${YELLOW}Options:${NC}
  <pyenv-virtualenv name>  Name of the pyen virtual environment to link, if environment does not exist it will be created
  <optional-python-version>  python version to use, if environment does not exist, used default pyenv python version if not provided

${YELLOW}Example:${NC}
  pyenv-venv my-very-best-project
  pyenv-venv my-very-best-project 3.9.15"
}

while getopts ":h" opt; do
  case ${opt} in
    h)
      display_usage
      exit 1
      ;;
    \?)
      echo -e "${RED}Invalid option: $OPTARG${NC}" 1>&2
      display_usage
      exit 2
      ;;
    :)
      echo -e "${RED}Invalid option: $OPTARG requires an argument${NC}" 1>&2
      display_usage
      exit 2
      ;;
  esac
done
shift $((OPTIND-1))


if [ $# -ne 1 ] && [ $# -ne 2 ]; then
  echo -e "${RED}pyenv-venv: takes pyenv-virtualenv-name optional-python-version ${NC}" 1>&2 echo
  display_usage
  exit 1
fi

if [ -d ".venv" ]; then
  echo -e "${RED}Error: The local .venv directory already exists. Use it or remove it before running this script.${NC}" 1>&2
  exit 1
fi

pyenv_virtualenv_name="$1"

default_pyenv_version="$(pyenv version-name)"
py_version="${2:-$default_pyenv_version}"

if [ -z "$py_version" ]; then
    py_version="$default_pyenv_version"
fi

pyenv_link_path="$PYENV_ROOT/versions/$pyenv_virtualenv_name"
real_pyenv_path="SHOULD_BE_DETECTED"

if [ -L "$pyenv_link_path" ]; then
  real_pyenv_path="$(readlink -f "$pyenv_link_path")"
  echo "Working with pyenv virtualenv $pyenv_virtualenv_name on $real_pyenv_path"
else
  read -p "$(echo -e "${YELLOW}$pyenv_link_path does not exist. Do you want to run pyenv virtualenv ${py_version} $pyenv_virtualenv_name [y/N]${NC} ")" ans
  if [[ "$ans" =~ ^[yY]$ ]]; then
      pyenv virtualenv "${py_version}" "$pyenv_virtualenv_name"
      real_pyenv_path="$PYENV_ROOT/versions/${py_version}/envs/${pyenv_virtualenv_name}"
  else
    echo -e "${GREEN}Operation cancelled by user.${NC}"
    exit 1
  fi
fi

if [ -e $real_pyenv_path ]; then
    echo "Creating symlink to .venv in project folder to $real_pyenv_path"
	echo "ln -s \"$real_pyenv_path\" ./.venv"
    ln -s "$real_pyenv_path" ./.venv
else
   echo -e "${RED}Error: pyenv virtualenv $pyenv_virtualenv_name does not exist. That is unexpected.${NC}" 1>&2
   exit 1
fi

read -p "$(echo -e "${YELLOW}Add .python-version file for pyenv aware IDE? [y/N]${NC} ")" ans
if [[ "$ans" =~ ^[yY]$ ]]; then
  pyenv local "$pyenv_virtualenv_name"
else
  echo -e "${GREEN}Skipping creation of .python-version file.${NC}"
fi

read -p "$(echo -e "${YELLOW}Install poetry? [y/N]${NC} ")" ans
if [[ "$ans" =~ ^[yY]$ ]]; then
    pyenv exec python -m pip install poetry
    pyenv rehash
    # or uncomment and use virtualenvironment way - up to you
    pyenv exec poetry config virtualenvs.create false --local
    echo "command to install dependencies: pyenv exec poetry install --no-root"
else
  echo -e "${GREEN}Skipping installing poetry .${NC}"
fi

read -p "$(echo -e "${YELLOW}Install uv? [y/N]${NC} ")" ans
if [[ "$ans" =~ ^[yY]$ ]]; then
    pyenv exec python -m pip install uv
    pyenv rehash
    echo "command to install dependencies: pyenv exec uv sync"
else
  echo -e "${GREEN}Skipping installing poetry .${NC}"
fi
